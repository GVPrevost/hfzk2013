unit SNSView;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, CustomView, RVStyle, RVScroll, RichView, Global, XMLObj, web_connect,
  CRVFData, RVTable;

type
  TreButtonTypeElement = (btReply, btComment, btRetweet,
    btGood, btFavor, btDelete);
  TreButtonType = set of TreButtonTypeElement;

  TUserContext = record
    id,screen_name,user_name,gender,location,description,website:string;
    verified:boolean;
    profile_image: TImageURLs;
  end;

  TSNSButtonClick = procedure (Sender: TObject;ButtonType: TreButtonTypeElement;
    Index: Integer) of object;

  TSNSLinkClick = procedure (Sender: TObject;category, extra: string) of object;

  TSNSCount = record
    Reply, Comment, Read, Retweet, Good, Favor: Integer;
  end;

  TSNSContext = class;
  TSNSContextClass = class of TSNSContext;

  TSNSContext = class(TCustomContext)
  private
    FIsRetweet: Boolean;
    FHasRetweet: boolean;
    FText: string;
    FNode: TNodeDict;
    FUserContext: TUserContext;

    procedure SetHasRetweet(const Value: boolean);
    function GetText: string;
    procedure SetText(const Value: string);
    procedure SetNode(const Value: TNodeDict);
  published
  public
    ID: string;
    Time: TDateTime;
    Image: Global.TImageURLs;
    Counts: TSNSCount;
    IsFlavor: Boolean;
    Buttons: TreButtonType;
    Retweet: TSNSContext;
    Account_Type: TAccount_Type;

    property Node: TNodeDict read FNode write SetNode;
    property UserContext: TUserContext read FUserContext;
    property Text: string read GetText;
    property HasRetweet: boolean read FHasRetweet;

    procedure ConvertText;
    constructor Create;
    destructor Destroy; override;
    procedure Assign(Source: TPersistent); override;
  end;

  TSNSViewer = class(TCustomViewer)
    procedure reTextJump(Sender: TObject; id: Integer);
  private
    FRetweetColor: TColor;
    FAccount_Type: TAccount_Type;
    FSNSButtonClick: TSNSButtonClick;

    procedure AddPicture(cell: TRVTableCellData;ImgUrl: string; SmallImgUrl: string;
      ParaNo: Integer;VAlign: TRVVAlign);
    function AdjustButtonText(button: TreButtonTypeElement;
      context: TSNSContext): string;
    procedure SetRetweetColor(const Value: TColor);
  protected
    procedure DoAddCell(Index: Integer;AContext: TCustomContext); override;
  published
    property OnSNSLinkClick: TSNSLinkClick read FSNSLinkClick write FSNSLinkClick;
    property OnSNSButtonClick: TSNSButtonClick read FSNSButtonClick write FSNSButtonClick;
    property Account_Type: TAccount_Type read FAccount_Type write FAccount_Type;
    property RetweetColor: TColor read FRetweetColor write SetRetweetColor;
  public
    constructor Create(AOwner: TComponent); override;
  end;

const
  ButtonTitle: array [btReply..btDelete] of string =
    ('回复', '评论', '转发', '赞','收藏', '删除');

function DefaultButtons(_type: TAccount_Type): TreButtonType;

var
  SNSViewer: TSNSViewer;

implementation

{$R *.dfm}

uses GifImg, MainHelper;

function DefaultButtons(_type: TAccount_Type): TreButtonType;
begin
  case _type of
    atSina: result := [btGood, btComment, btFavor, btRetweet];
    atTwitter: result := [btReply, btRetweet, btFavor];
    atFacebook: result := [btComment, btRetweet, btGood];
  end;
end;

function ConvertUser(node: TNode): TUserContext;
begin
  result.id := node['id'].Value;
  result.screen_name := node['screen_name'].Value;
  result.user_name := node['screen_name'].Value;
  result.gender := node['gender'].Value;
  result.location := node['location'].Value;
  result.description := node['description'].Value;
  result.website := node['website'].Value;
  result.verified := node['verified'].Value;
  result.profile_image.Large := node['profile_image']['large_url'].Value;
  result.profile_image.Small := node['profile_image']['small_url'].Value;
end;

function CalcZoom(x,y: integer): integer;
var
  max: integer;
begin
  if x>y then
    max := x
  else
    max := y;
  result := max div 128 +1;
end;

function EncodeLink(texttype, extra: string): string;
begin
  result := texttype+'_'+extra;
end;

procedure DecodeLink(text: string;var texttype, extra: string);
var
  i: integer;
begin
  i := Pos('_',text);
  texttype := Copy(text, 1, i-1);
  extra := Copy(text, i+1, Length(text));
end;

function EncodeButtonTag(button: TreButtonTypeElement;Index: Integer): string;
begin
  result := Format('%d_%d', [Ord(button), Index]);
end;

procedure DecodeButtonTag(Tag: string;var button: TreButtonTypeElement;
var Index: Integer);
var
  i: integer;
begin
  i := Pos('_', Tag);
  button := TreButtonTypeElement(StrToInt(Copy(Tag, 1, i-1)));
  Index := StrToInt(Copy(Tag, i+1, Length(Tag)));
end;

{ TSNSContext }

procedure TSNSContext.Assign(Source: TPersistent);
var
  context: TSNSContext;
begin
  if Source is TSNSContext then
  begin
    context := Source as TSNSContext;
    self.Time := context.Time;
    self.FText := context.Text;
    self.Image := context.Image;
    self.Counts := context.Counts;
    self.IsFlavor := context.IsFlavor;
    self.Buttons := context.Buttons;
    self.FUserContext := context.FUserContext;
    self.Account_Type := context.Account_Type;
    if not Assigned(FNode) then
      FNode := TNodeDict.Create(nil);
    self.Node.Assign(context.Node);
    if (not FIsRetweet) and self.HasRetweet then
      self.Retweet.Assign(context.Retweet);
    self.ConvertText;
    exit;
  end;
  inherited;
end;

procedure TSNSContext.ConvertText;
begin
  self.ID := FNode['id'].Value;
  self.Image.Small := FNode['image']['small_url'].Value;
  self.Image.Large := FNode['image']['large_url'].Value;
  self.Counts.Favor := FNode['favor_count'].Value;
  self.FText := FNode['text'].Value;
  self.Counts.Retweet := FNode['retweet_count'].Value;
  self.Counts.Comment := FNode['comment_count'].Value;
  self.Counts.Good := FNode['good_count'].Value;
  self.FUserContext := ConvertUser(FNode['user']);

  self.FHasRetweet := FNode['has_retweet'].Value;
  if self.HasRetweet then
  begin
    self.Retweet := TSNSContext.Create;
    self.Retweet.ID := FNode['retweet']['id'].Value;
    self.Retweet.FHasRetweet := False;
    self.Retweet.FNode.Assign(FNode['retweet']);
    self.Retweet.FText := FNode['retweet']['text'].Value;
    self.Retweet.FUserContext := ConvertUser(FNode['retweet']['user']);
    self.Retweet.Counts.Favor := FNode['retweet']['favor_count'].Value;
    self.Retweet.Counts.Retweet := FNode['retweet']['retweet_count'].Value;
    self.Retweet.Counts.Comment := FNode['retweet']['comment_count'].Value;
    self.Retweet.Counts.Good := FNode['retweet']['good_count'].Value;
    self.Retweet.Image.Small := FNode['retweet']['image']['small_url'].Value;
    self.Retweet.Image.Large := FNode['retweet']['image']['large_url'].Value;
  end;
end;

constructor TSNSContext.Create;
begin
  FHasRetweet := False;
  FIsRetweet := False;
  FNode := TNodeDict.Create(nil);
end;

destructor TSNSContext.Destroy;
begin
  if Assigned(Retweet) then
    Retweet.Free;
  if Assigned(FNode) then
    FNode.Free;
  inherited;
end;

function TSNSContext.GetText: string;
begin
  result := UTF8ToWide(FText);
end;

procedure TSNSContext.SetHasRetweet(const Value: boolean);
begin
  FHasRetweet := Value;
  if Value then
  begin
    Retweet := TSNSContext.Create;
    Retweet.FIsRetweet := True;
  end;
end;

procedure TSNSContext.SetNode(const Value: TNodeDict);
begin
  FNode.Assign(Value);
  ConvertText;
end;

procedure TSNSContext.SetText(const Value: string);
begin
  FText := WideToUTF8(Value);
end;

{ TSNSViewer }

procedure TSNSViewer.AddPicture(cell: TRVTableCellData; ImgUrl: string;
  SmallImgUrl: string; ParaNo: Integer; VAlign: TRVVAlign);
var
  Gra: TGraphic;
begin
  if ImgUrl = '' then exit;
  Gra := GetPictureFromURL(ImgUrl);
  if not Assigned(Gra) then
    exit;
  cell.AddHotPictureTag('image', Gra, ParaNo, VAlign, Integer(StrNew(PChar(EncodeLink('image',SmallImgUrl)))));
end;

function TSNSViewer.AdjustButtonText(button: TreButtonTypeElement;
  context: TSNSContext): string;
const
  FmtStr = '%s';
  FmtStr2 = '%s(%d)';

  procedure MakeText(var text: string;count: Integer);
  begin
    if Count = 0 then
      text := Format(FmtStr, [text])
    else
      text := Format(FmtStr2, [text, Count]);
  end;

begin
  result := ButtonTitle[button];
  case button of
    btReply: MakeText(result, context.Counts.Reply);
    btComment: MakeText(result, context.Counts.Comment);
    btGood: MakeText(result,context.Counts.Good);
    btRetweet: MakeText(result, context.Counts.Retweet);
  end;
end;

constructor TSNSViewer.Create(AOwner: TComponent);
begin
  inherited;
  RetweetColor := $F2F2F2;
  FContextClass := TSNSContext;
end;

procedure TSNSViewer.DoAddCell(Index: Integer; AContext: TCustomContext);
var
  cell: TRVTableCellData;
  context: TSNSContext;

  procedure DrawButtons(buttons: TreButtonType;
    cell: TRVTableCellData;IsRetweet: boolean);
  var
    button: TreButtonTypeElement;
    i, ParaNo1, ParaNo: Integer;
    text: string;
    con: TSNSContext;
    Tag: string;
  begin
    if buttons = [] then
      buttons := [btComment, btRetweet, btFavor, btGood];
    i := 0;
    for button in buttons do
    begin
      ParaNo1 := 3 - Ord(IsRetweet);
      if i = 0 then
        ParaNo := ParaNo1
      else
      begin
        ParaNo := -1;
        cell.AddTextNL(' | ', 5, ParaNo, ParaNo1);
      end;
      if IsRetweet then
        con := context.Retweet
      else
        con := context;
      text := ' '+ButtonTitle[button];
      Tag := EncodeButtonTag(button, Index);
      cell.AddNLTag(AdjustButtonText(button, con), 3, ParaNo, Integer(StrNew(PChar(Tag))));
      Inc(i);
    end;
  end;

  function DrawEmotion(cell: TRVTableCellData;EmotionName: string): boolean;
  var
    gif: TGifImage;
    FileName, _type: string;
  begin
    result := false;
    _type := Emotion_Sina_Path;
    FileName := Format('%s\%s.gif', [_type, EmotionName]);
    if not FileExists(FileName) then exit;
    gif := TGifImage.Create;
    gif.LoadFromFile(FileName);
    cell.AddPictureEx('emotion', gif, -1, rvvaBaseLine);
    result := true;
  end;

  procedure DrawText(cell: TRVTableCellData;
    IsRetweet: boolean;node: TNode);
  var
    ParaNo, ParaNo1, i, index: Integer;
    texttype, Tag: string;
    tmp: TNode;
  begin
    ParaNo1 := Ord(IsRetweet);
    index := 1;
    tmp := node['text']['blocks'];
    for i := 1 to tmp.Count do
    begin
      Tag := '';
      if i = 1 then
        ParaNo := ParaNo1
      else
        ParaNo := -1;
      texttype := tmp[i]['texttype'].Value;
      if texttype = 'normal' then
        index := 1
      else if (texttype = 'url') or (texttype = 'mention') or (texttype='trend') then
      begin
        index := 2;
        Tag := EncodeLink(texttype, tmp[i]['extra'].Value);
      end
      else if texttype = 'emotion' then
      begin
        index := 4;
        if DrawEmotion(cell, tmp[i]['text'].Value) then continue;
      end;
      cell.AddNLTag(tmp[i]['text'].Value, index, ParaNo, Integer(StrNew(PChar(Tag))));
    end;
  end;

begin
  inherited;
  context := AContext as TSNSContext;
  cell := Table.Cells[Table.Rows.Count-1,0];
  AddPicture(cell, context.UserContext.Profile_Image.small, context.UserContext.profile_image.Large, 0, rvvaAbsMiddle);
  cell.AddNLTag(Context.UserContext.screen_name, 0, -1, Integer(StrNew(PChar(EncodeLink('mention',Context.UserContext.id)))));
  DrawText(cell, false, context.Node);
  AddPicture(cell, context.Image.Small, context.Image.Large, 0, rvvaBaseLine);
  if Context.HasRetweet then
  begin
    cell.AddNLTag(Context.Retweet.UserContext.screen_name, 0, 1, Integer(StrNew(PChar(EncodeLink('mention',Context.Retweet.UserContext.id)))));
    DrawText(cell, True, context.Retweet.Node);
    AddPicture(cell, context.Retweet.Image.Small, context.Retweet.Image.Large, 1, rvvaBaseLine);
    DrawButtons(Context.Retweet.Buttons, cell, True);
    cell.AddTextNL('',0,-1,0);
  end;
  DrawButtons(Context.Buttons, cell, False);
end;

procedure TSNSViewer.reTextJump(Sender: TObject; id: Integer);
var
  Data: TCustomRVFormattedData;
  ItemNo: Integer;
  Tag: string;
  Index: Integer;
  btn: TreButtonTypeElement;
  texttype, extra: string;
begin
  reText.GetJumpPointLocation(id, Data, ItemNo);
  Tag := PChar(Data.GetItemTag(ItemNo));
  if Tag[1] in ['0'..'9'] then
  begin
    DecodeButtonTag(String(Tag), btn, Index);
    if Assigned(FSNSButtonClick) then
      FSNSButtonClick(self, btn, Index);
  end
  else
  begin
    DecodeLink(Tag, texttype, extra);
    if texttype = 'image' then
    begin
      ShowLargeImage(GetPictureFromURL(extra));
    end;
  end;
end;

procedure TSNSViewer.SetRetweetColor(const Value: TColor);
begin
  FRetweetColor := Value;
  RVStyle.ParaStyles[1].Background.Color := Value;
  RVStyle.ParaStyles[2].Background.Color := Value;
end;

end.
